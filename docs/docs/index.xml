<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sealr</title>
    <link>https://jandix.github.io/sealr/docs/</link>
    <description>Recent content on sealr</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://jandix.github.io/sealr/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JWT Simple Example</title>
      <link>https://jandix.github.io/sealr/docs/jwt/jwt_simple_example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jandix.github.io/sealr/docs/jwt/jwt_simple_example/</guid>
      <description>In the code below, you find a small example of how to implement a JWT strategy in an application.
The application consists of three routes. The first route allows your users to login and issues a JWT. The second route is an open route that does not require authentication. The third route requires authentication using the JWT.
The JWT filter looks like this:
# integrate the jwt strategy in a filter pr$filter(&amp;quot;sealr-jwt&amp;quot;, function (req, res) { # simply call the strategy and forward the request and response sealr::authenticate(req = req, res = res, is_authed_fun = sealr::is_authed_jwt, token_location = &amp;quot;header&amp;quot;, secret = secret) })  :warning: Please change the secret to a super secure secret of your choice.</description>
    </item>
    
    <item>
      <title>Google OpenID Connect - Simple Example</title>
      <link>https://jandix.github.io/sealr/docs/oidc_google/oidc_google_simple_example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jandix.github.io/sealr/docs/oidc_google/oidc_google_simple_example/</guid>
      <description>Run the example Obtain Google OAuth credentials In order to run this example, you need to obtain OAuth2.0 credentials for your plumber API so that Google later knows that it is authenticating the user to a legitimate application. For this, create a new project in the Google API Console - you may need to authorize your Google account first if you are not yet a user of Google&amp;rsquo;s developer platform.</description>
    </item>
    
    <item>
      <title>General Idea</title>
      <link>https://jandix.github.io/sealr/docs/sealr/idea/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jandix.github.io/sealr/docs/sealr/idea/</guid>
      <description>Plumber filters for authentication / authorization The primary logic of sealr is based on plumber filters (although you can use sealr functionality without filters as well by using the is_authed functions directly, see below). “Plumber filters can be used to define a “pipeline” for handling incoming requests&amp;rdquo; (Plumber docs).
So if your plumber API receives a request, the request will first be routed through the different filters before it “arrives” at its destination endpoint.</description>
    </item>
    
    <item>
      <title>JWT Claims Example</title>
      <link>https://jandix.github.io/sealr/docs/jwt/jwt_claims_example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jandix.github.io/sealr/docs/jwt/jwt_claims_example/</guid>
      <description>JSON Web Tokens (JWT) can contain claims. “Claims are statements about an entity (typically, the user) and additional data” (https://jwt.io/introduction/). They are expressed as key-value pairs.
There are three different types of claims: registered, public and private claims. All types of claims are implemented in the same manner, they only differ in whether and where the claims are registered with the Internet Assigned Numbers Authority (IANA). For example, the iss claim is a registered claim defined in the JWT standard RFC 7519 and registered at IANA.</description>
    </item>
    
    <item>
      <title>Implementation Overview</title>
      <link>https://jandix.github.io/sealr/docs/sealr/implementation_overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jandix.github.io/sealr/docs/sealr/implementation_overview/</guid>
      <description>authenticate *sealr*’s main function is the authenticate function. It is supposed to be used within a plumber filter. authenticate takes a is_authed_* function (see below) as input and depending on the output of this “checker” function, takes action:
 if the request is authenticated / authorized, it forwards to the next plumber handler using plumber::forward. if the request is not authenticated / authorized, it returns to the user, passing forward HTTP status code, description and message from the output of the is_authed_ function.</description>
    </item>
    
    <item>
      <title>JWT Cookie Example</title>
      <link>https://jandix.github.io/sealr/docs/jwt/jwt_cookie_example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jandix.github.io/sealr/docs/jwt/jwt_cookie_example/</guid>
      <description>Instead of requiring the user to send the JWT back in the HTTP Authorization header, you can also use a cookie in the browser of the API user to store the JWT. This way, the user does not have to remember to send the JWT in the Authorization header.
Example implementation In this example, we use an encrypted cookie to store the JWT. You can find the full code for this example at the end of this page.</description>
    </item>
    
  </channel>
</rss>